{"version":3,"sources":["helper.js","pokemonDeskCreator.js","api.js","reducer.js","header.js","pokemonDesc.js","Pokemon.js","PokemonContainer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["toUperFirsLetter","name","charAt","toUpperCase","slice","useStyle","makeStyles","cardStyle","padding","cardImage","margin","width","maxWidth","height","DeskCreator","props","classes","mainData","history","filter","toArreyPokeCards","Object","keys","map","currentId","includes","pokemonId","id","sprite","Grid","item","sm","xs","lg","md","key","Card","onClick","push","style","cursor","CardContent","className","cardContant","CardMedia","image","Typography","getPokemonCard","container","spacing","PokemonApi","axios","get","InitialState","data","pokemonCard","isPokemon","MainReducer","state","action","type","pokeData","pokemon","index","filterCreator","theme","searchContainer","display","alignItems","backgroundColor","fade","palette","common","white","searchIcon","marginRight","connect","AppBar","position","Toolbar","TextField","textField","onChange","e","target","value","label","variant","thankCreatorGetData","dispatch","then","response","results","useEffect","textAlign","Pokemon","weight","sprites","fullSize","console","log","src","front_default","Button","startIcon","thankCreatorGetPokemon","match","params","pokemonID","RootReducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","App","exact","path","render","Boolean","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94d11487.chunk.js","sourcesContent":["\r\nexport let toUperFirsLetter = (name)=>{\r\n\r\n    return name.charAt(0).toUpperCase() + name.slice(1)\r\n}","import React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {toUperFirsLetter} from './helper'\r\n\r\nlet useStyle = makeStyles({\r\n    cardStyle:{\r\n        padding: \"20px\",\r\n    },\r\n    cardImage:{\r\n        margin: 'auto',\r\n        width: '100%',\r\n        maxWidth: \"200px\",\r\n        height: '200px'\r\n    }\r\n\r\n})\r\n\r\n\r\nconst DeskCreator = (props)=>{\r\n    let classes = useStyle();\r\n    let{mainData,history,filter}= props;\r\n\r\n    let getPokemonCard = (pokemonId)=>{\r\n        let{name,id,sprite} = mainData[pokemonId]\r\n\r\n        return(\r\n            <Grid item sm={6} xs={12}  lg={3}  md={4} key = {id} >\r\n                <Card onClick={()=> history.push(`/${id}`)} style={{cursor: \"pointer\"}}>\r\n                    <CardContent className={classes.cardContant}>\r\n                        <CardMedia image={sprite} className={classes.cardImage} />\r\n\r\n                        <Typography >\r\n                            {id} : {toUperFirsLetter(name)}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n\r\n    }\r\n    let toArreyPokeCards = Object.keys(mainData).map(currentId => {\r\n       if(mainData[currentId].name.includes(filter)) return getPokemonCard(currentId)\r\n    });\r\n\r\n\r\n\r\n    return(\r\n        <Grid container spacing={3} className={classes.cardStyle}>\r\n            {toArreyPokeCards}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default DeskCreator ;","\r\nimport axios from 'axios'\r\n\r\nexport const PokemonApi ={\r\n    getPokemons(){\r\n        return axios.get('https://pokeapi.co/api/v2/pokemon?limit=256')\r\n    },\r\n    getPokemon(id){\r\n        return axios.get(`https://pokeapi.co/api/v2/pokemon/${id}/`)\r\n    }\r\n}","import {PokemonApi} from \"./api\";\r\n\r\nconst DOWNLOAD = \"DOWNLOAD_DATA\";\r\nconst GET_POKEMON = \"GETPOKEMON\";\r\nconst IS_POKEMON = \"IS_POKEMON\";\r\nconst FILTER = 'FILTER';\r\n\r\n\r\n\r\n\r\nlet InitialState = {\r\n            data: null,\r\n            pokemonCard: null,\r\n            isPokemon: true,\r\n            filter: ''\r\n\r\n}\r\n\r\nlet MainReducer = (state = InitialState,action)=>{\r\n    switch (action.type) {\r\n        case DOWNLOAD:\r\n            return{\r\n                ...state,\r\n                data: {...action.pokeData.map((pokemon,index)=>{\r\n                    return{\r\n                        name: pokemon.name,\r\n                        id: index + 1,\r\n                        sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${index+1}.png`\r\n\r\n                    }\r\n                    })}\r\n            }\r\n        case GET_POKEMON:\r\n            return {\r\n                ...state,\r\n                pokemonCard: {...action.pokemonCard}\r\n            }\r\n        case IS_POKEMON:\r\n            return {\r\n                ...state,\r\n                isPokemon: action.pokemon\r\n            }\r\n        case FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.filter\r\n            }\r\n\r\n\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default MainReducer;\r\n\r\nlet GetPokemonData =(pokeData)=> ({type:DOWNLOAD,pokeData});\r\nlet GetPokemonCardActionCreator = ( pokemonCard)=> ({type:GET_POKEMON, pokemonCard});\r\nlet isPokemonCreator = (pokemon)=> ({type:IS_POKEMON,pokemon});\r\nexport let filterCreator = (filter) =>({type:FILTER, filter})\r\n\r\n\r\nexport const thankCreatorGetData = ()=>(dispatch)=>{\r\n    PokemonApi.getPokemons()\r\n        .then(response => {\r\n            dispatch(GetPokemonData(response.data.results))\r\n        })\r\n}\r\n\r\nexport const thankCreatorGetPokemon = (id)=>(dispatch)=>{\r\n    PokemonApi.getPokemon(id)\r\n        .then(response => {\r\n           dispatch(GetPokemonCardActionCreator(response.data))\r\n        })\r\n}","import AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport React from \"react\";\r\nimport {makeStyles,fade} from \"@material-ui/core/styles\";\r\nimport {connect} from 'react-redux'\r\n\r\nimport {filterCreator} from './reducer';\r\nlet useStyle = makeStyles(theme=>({\r\n    searchContainer:{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        padding: '5px',\r\n        margin:  '5px'\r\n    },\r\n    searchIcon:{\r\n        marginRight: '10px'\r\n    }\r\n}))\r\n\r\n\r\nconst Header = (props)=>{\r\n    const classes = useStyle()\r\n    let changeFilter =(e)=>{\r\n        props.filterCreator(e.target.value)\r\n\r\n    }\r\n    return(\r\n    <AppBar position='static'>\r\n        <Toolbar>\r\n\r\n            <div className={classes.searchContainer}>\r\n                <SearchIcon className={classes.searchIcon}/>\r\n                <TextField  className={classes.textField } onChange={changeFilter} value={props.filter} label='Finde Pokemon' variant='standard' />\r\n            </div>\r\n\r\n        </Toolbar>\r\n    </AppBar>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state)=>{\r\n    return{\r\n        filter: state.mainData.filter\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{filterCreator})(Header)","import React,{useEffect} from \"react\";\r\nimport {connect} from 'react-redux'\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport PokemonDeskCreator from './pokemonDeskCreator';\r\nimport {makeStyles} from \"@material-ui/styles\";\r\n\r\nimport {thankCreatorGetData,filterCreator} from './reducer';\r\nimport Header from \"./header\";\r\n\r\n\r\nlet useStyle = makeStyles({\r\n    searchContainer:{\r\n\r\n    }\r\n})\r\n\r\nlet PokemonDesk = (props)=>{\r\n\r\n\r\nuseEffect(()=>{\r\n    props.thankCreatorGetData()\r\n},[])\r\n\r\n\r\n    return(\r\n        <>\r\n            <Header />\r\n\r\n            {\r\n                props.mainData ? <PokemonDeskCreator {...props}/> : <h1 style={{textAlign:\"center\"}}>Just Download ...</h1>\r\n            }\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\nlet mapStateToProps = (state)=>{\r\n    return{\r\n        mainData: state.mainData.data,\r\n        filter: state.mainData.filter\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{thankCreatorGetData,filterCreator})(PokemonDesk);","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {toUperFirsLetter} from './helper';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\n\r\nlet Pokemon = (props) =>{\r\n\r\n    let {pokemonCard,history} = props;\r\n    let{name,id,height,weight,sprites} = pokemonCard;\r\n    let fullSize = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`\r\n    console.log(name,id,height,weight,sprites)\r\n    return <div>\r\n        <Typography variant='h1'>\r\n            {id}.{toUperFirsLetter(name)}\r\n            <img src={sprites.front_default} />\r\n        </Typography>\r\n        <img src={fullSize} style={{height: '300px',width: '300px'}}/>\r\n        <Typography variant='h3'>Pokemon Info:</Typography>\r\n        <Typography >Height: {height}</Typography>\r\n        <Typography >Weight: {weight}</Typography>\r\n        <Button style={{backgroundColor: '#00bcd4'}}\r\n                startIcon={<ArrowBackIcon/>}\r\n                variant='contained'\r\n                onClick={()=>history.push('/') }> Back to Pokemons</Button>\r\n    </div>\r\n}\r\n\r\nexport default Pokemon;","import React, {useEffect} from \"react\";\r\nimport {thankCreatorGetPokemon} from './reducer';\r\nimport {connect} from 'react-redux'\r\nimport Pokemon from \"./Pokemon\";\r\n\r\nlet PokemonContainer = (props)=>{\r\n\r\n    const id = props.match.params.pokemonID;\r\n\r\n    let {pokemonCard} = props\r\n    useEffect(()=>{\r\n        props.thankCreatorGetPokemon(id)\r\n    },[])\r\n\r\n    return(\r\n        <>\r\n            {pokemonCard ? <Pokemon {...props}/> : <h1>Loading...</h1>}\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state)=>{\r\n    return{\r\n        pokemonCard: state.mainData.pokemonCard\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{thankCreatorGetPokemon})(PokemonContainer);","import {combineReducers, createStore,applyMiddleware} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport MainReducer from './reducer';\r\n\r\nlet RootReducers = combineReducers({\r\n    mainData: MainReducer\r\n})\r\n\r\nlet store = createStore(RootReducers,applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n\r\nwindow.store = store","import React from 'react';\nimport PokemonDesk from './pokemonDesc';\nimport PokemonContainer  from './PokemonContainer';\nimport {HashRouter,Switch,Route} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './store'\n\n\nfunction App() {\n  return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' render={(props)=> <PokemonDesk {...props}/>}/>\n            <Route  path='/:pokemonID' render={(props)=> <PokemonContainer  {...props}/>}/>\n          </Switch>\n        </div>\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\n\nlet history  = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter history={history}>\n           <App />\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}